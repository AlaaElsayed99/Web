@model IEnumerable<Core.ViewModels.IndexVM>
@{
    ViewData["Title"] = "List of Invoices";
    
}

<h2>@ViewData["Title"]</h2>
<hr />

<div style="display: flex; align-items: center; justify-content: flex-end;">
    <form id="searchForm" method="post" style="display: flex; gap: 10px;">
        <input placeholder="Customer Name" name="customerName" id="customerName" class="form-control" style="width:150px;" />
        <input placeholder="Employee Name" name="employeeName" id="employeeName" class="form-control" style="width:150px;" />
        <input type="date" name="from" id="fromDate" class="form-control" />
        <input type="date" name="to" id="toDate" class="form-control" />
        <button type="submit" class="btn btn-success">Search</button>
    </form>
</div>

<br />
<br />
<table class="table">
    <!-- Table headers -->
    <thead  class="thead-dark">
        <tr>
            <th>Invoice ID</th>
            <th>Customer Name</th>
            <th>Employee Name</th>
            <th>Created At</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="searchResults">
        @Html.Partial("_ReportInvoce",Model) 
    </tbody>
</table>
@{
    int maxSize = 5; // Set your maximum page size here
    bool hasItems = Model.Any();
    bool isFirstPage = hasItems && Model.First().PageNumber == 1;
    bool isLastPage = hasItems && Model.Last().PageNumber >= maxSize;

    int nextPageNumber = isLastPage ? Model.Last().PageNumber : Model.Last().PageNumber + 1;
    bool canAddNextPage = hasItems && Model.Select(i => i.Id).Count() < maxSize * (Model.Last().PageNumber - 1); // Check if enough items for the next page

    string prevPageUrl = isFirstPage ? "" : Url.Action("Index", new { pageNumber = Model.First().PageNumber - 1 });
    string nextPageUrl = isLastPage && !canAddNextPage ? "" : Url.Action("Index", new { pageNumber = nextPageNumber });
}

@if (hasItems)
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-auto">
                <a class="btn btn-success @(isFirstPage ? "disabled" : "")" href="@prevPageUrl"> Previous </a>
                <a class="btn btn-success @(isLastPage && hasItems ? "disabled" : "")" href="@nextPageUrl"> Next </a>
            </div>
        </div>
    </div>

}




@section Scripts {
    <script src="~/js/viewjs/removeinvoicebyajax.js"></script>
    <script>
        // Function to perform AJAX search
        function searchInvoices() {
            var formData = $('#searchForm').serialize(); // Serialize form data

            $.ajax({
                url: '@Url.Action("Search", "Invoice")', // Replace with your controller action URL
                type: 'POST',
                data: formData,
                success: function (result) {
                    $('#searchResults').html(result); // Update the search results container with the partial view content
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText); // Log any errors to the console
                }
            });
        }

        // Handle form submission
        $('#searchForm').submit(function (e) {
            e.preventDefault(); // Prevent default form submission
            searchInvoices(); // Call the search function
        });
    </script>
}